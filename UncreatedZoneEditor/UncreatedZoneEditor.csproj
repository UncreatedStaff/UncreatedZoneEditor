<Project Sdk="Microsoft.NET.Sdk">

  <!-- Versioning TODO every update -->
  <PropertyGroup>

    <Version>0.0.1</Version>
    <PackageReleaseNotes>https://github.com/DanielWillett/UncreatedZoneEditor/releases</PackageReleaseNotes>

    <!-- Client, Server, or Both (generates two packages) -->
    <TargetSide>Both</TargetSide>

  </PropertyGroup>


  <!-- Package Information -->
  <PropertyGroup>

    <NeutralLanguage>en</NeutralLanguage>
    <Product>Uncreated Zone Editor</Product>
    <AssemblyName>Uncreated Zone Editor</AssemblyName>
    <PackageId>DanielWillett.UncreatedZoneEditor</PackageId>
    <Title>Uncreated Zone Editor</Title>
    <RootNamespace>Uncreated.ZoneEditor</RootNamespace>
    <Authors>DanielWillett</Authors>
    <Company>Uncreated</Company>
    <PackageProjectUrl>https://github.com/UncreatedStaff/UncreatedZoneEditor</PackageProjectUrl>
    <RepositoryUrl>https://github.com/UncreatedStaff/UncreatedZoneEditor</RepositoryUrl>

    <!-- Recommended to set up, not required. Will be ignored if the file doesn't exist. -->
    <!-- See https://learn.microsoft.com/en-us/dotnet/standard/assembly/create-public-private-key-pair for more info on generating a strong key pair. -->
    <!-- The .snk file should NOT be in your repository. It should stay secret. -->
    <StrongNameKeyFile>C:/Strong Name Keys/Uncreated Zone Editor/Uncreated Zone Editor.snk</StrongNameKeyFile>
    <PublicKeyFile>C:/Strong Name Keys/Uncreated Zone Editor/Uncreated Zone Editor.publickey</PublicKeyFile>

    <!-- I would appreciate if you keep the 'devkitserver' tag here if you plan to upload to NuGet so I can see a list of all plugins. -->
    <PackageTags>unturned;module;plugin;map;editor;multiplayer;devkitserver</PackageTags>
    <Description>Plugin for creating zones for Uncreated Warfare.</Description>

    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>

    <PackageIcon>icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>

  </PropertyGroup>


  <!-- Signing -->
  <PropertyGroup Condition="exists('$(StrongNameKeyFile)')">

    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>$(StrongNameKeyFile)</AssemblyOriginatorKeyFile>
    <DefineConstants>$(DefineConstants);HAS_STRONG_NAME</DefineConstants>

  </PropertyGroup>


  <!-- License -->
  <PropertyGroup>

    <PackageLicenseExpression>GPL-3.0-only</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>

  </PropertyGroup>


  <!-- Package Assets -->
  <ItemGroup>
    <None Include="../README.md" Pack="true" PackagePath="\" />
    <None Include="../Promo/icon.png" Pack="true" PackagePath="\" />
  </ItemGroup>


  <!-- Build Information -->
  <PropertyGroup>

    <TargetFramework>netstandard2.1</TargetFramework>
    <Nullable>enable</Nullable>
    <LangVersion>preview</LangVersion>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
    <NoWarn>NU1701;1702,1591,1587,1711,1735,1573,1574,1570,1584,1658;CS0162;CS8002;NU1803</NoWarn>

    <AssemblyTitle>$(AssemblyName)</AssemblyTitle>
    <AssemblyVersion>$(Version).0</AssemblyVersion>
    <FileVersion>$(Version).0</FileVersion>

  </PropertyGroup>

  <Import Project="../DevkitServer.targets" />
  <Import Project="../Imports.targets" />
  
  <!-- Package ID Settings -->
  <Choose>
    <When Condition="$(DefineConstants.Contains(DS_SERVER_TARGET))">
      <PropertyGroup>
        <Title>$(Title) (Server Build)</Title>
        <OutputPath>bin\Uncreated Zone Editor.Server\</OutputPath>
        <PackageId>$(PackageId)</PackageId>
        <PackageVersion>$(Version)</PackageVersion>
      </PropertyGroup>
    </When>
    <When Condition="$(DefineConstants.Contains(DS_CLIENT_TARGET))">
      <PropertyGroup>
        <Title>$(Title) (Client Build)</Title>
        <OutputPath>bin\Uncreated Zone Editor.Client\</OutputPath>
        <PackageId>$(PackageId)</PackageId>
        <PackageVersion>$(Version)</PackageVersion>
      </PropertyGroup>
    </When>
    <When Condition="$(IsServer)">
      <PropertyGroup>
        <Title>$(Title) (Server Build)</Title>
        <OutputPath>bin\Uncreated Zone Editor.Server\</OutputPath>
        <PackageId>$(PackageId).Server</PackageId>
        <PackageVersion>$(Version)-server</PackageVersion>
      </PropertyGroup>
    </When>
    <When Condition="$(IsClient)">
      <PropertyGroup>
        <Title>$(Title) (Client Build)</Title>
        <OutputPath>bin\Uncreated Zone Editor.Client\</OutputPath>
        <PackageId>$(PackageId).Client</PackageId>
        <PackageVersion>$(Version)-client</PackageVersion>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <OutputPath>bin\Uncreated Zone Editor\</OutputPath>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>

    <!-- Only build a package in RELEASE mode -->
    <GeneratePackageOnBuild>$(IsRelease)</GeneratePackageOnBuild>

  </PropertyGroup>

  <!-- Debugging Settings -->
  <Choose>
    <When Condition="$(IsDebug)">
      <PropertyGroup Condition="$(IsDebug)">
        <DebugType>full</DebugType>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup Condition="$(IsRelease)">
        <Optimize>True</Optimize>
        <DebugType>portable</DebugType>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup Condition="exists('$(StrongNameKeyFile)') And exists('$(PublicKeyFile)')">
    <None Include="$(PublicKeyFile)" />
  </ItemGroup>

  <!-- Check that all paths exist -->
  <Target Name="Check Paths" BeforeTargets="Build">
    <Error Text="Server path '$(ServerPath)' is not present. Change it in 'Paths.targets'." Importance="high" Condition="!exists('$(ServerPath)')" />
    <Error Text="Client path '$(ClientPath)' is not present. Change it in 'Paths.targets'." Importance="high" Condition="!exists('$(ClientPath)')" />
    <Error Text="DevkitServer module at '$(DevkitServerModulePath)' is not present. Change it in 'Paths.targets'." Importance="high" Condition="!exists('$(DevkitServerModulePath)')" />
  </Target>

  <!-- Debug Output -->
  <Target Name="DevkitServer Module Debug Output" BeforeTargets="Build" Condition="true">
    <Message Text="Built server plugin $(PackageId) for DevkitServer v$(DevkitServerMinCompatabilityVersion)+ with $(Configuration)." Importance="high" Condition="$(IsServer)" />
    <Message Text="Built client plugin $(PackageId) for DevkitServer v$(DevkitServerMinCompatabilityVersion)+ with $(Configuration)." Importance="high" Condition="$(IsClient)" />
    <Message Text="Installation Location: &quot;$(SharedPath)&quot;." Importance="high" />
    <Message Text="DS Location: &quot;$(DevkitServerModulePath)&quot;." Importance="high" />
    <Message Text="Solution Location: &quot;$(SolutionDir)&quot;." Importance="high" />
    <Message Text="Package: &quot;$(Title)&quot; $(PackageId)  v$(PackageVersion)." Importance="high" />
    <Message Text="Defines: $(DefineConstants)." Importance="high" />
  </Target>

  <!-- Keep this at the bottom, makes unit tests work -->
  <Import Project="../Cleanup.targets" />
</Project>
